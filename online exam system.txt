//package Exam;

import java.sql.*;

import java.util.Scanner;

public class OnlineExamSystem {
    private static final String URL = "jdbc:mysql://localhost:3306/OnlineExamDB";
    private static final String USER = "root"; // Change based on your MySQL setup
    private static final String PASSWORD = "system"; // Change if you have a MySQL password
    private static Scanner scanner = new Scanner(System.in);
    private static Connection conn;

    public static void main(String[] args) {
        try {
            conn = DriverManager.getConnection(URL, USER, PASSWORD);
            System.out.println("Welcome to Online Exam System!");

            while (true) {
                System.out.println("\n1. Register\n2. Login\n3. Exit");
                System.out.print("Choose an option: ");
                int choice = scanner.nextInt();
                
                scanner.nextLine(); 

                switch (choice) {
                    case 1: registerUser(); break;
                    case 2: loginUser(); break;
                    case 3: System.out.println("Exiting..."); conn.close(); return;
                    default: System.out.println("Invalid choice. Try again.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // User Registration
    private static void registerUser() throws SQLException {
        System.out.print("Enter username: ");
        String username = scanner.nextLine();
        System.out.print("Enter password: ");
        String password = scanner.nextLine();
        System.out.print("Enter role (admin/student): ");
        String role = scanner.nextLine();

        if (!role.equals("admin") && !role.equals("student")) {
            System.out.println("Invalid role. Choose 'admin' or 'student'.");
            return;
        }

        String query = "INSERT INTO users (username, password, role) VALUES (?, ?, ?)";
        PreparedStatement ps = conn.prepareStatement(query);
        ps.setString(1, username);
        ps.setString(2, password);
        ps.setString(3, role);

        try {
            ps.executeUpdate();
            System.out.println("Registration successful!");
        } catch (SQLIntegrityConstraintViolationException e) {
            System.out.println("Username already exists. Try another.");
        }
    }

    // User Login
    private static void loginUser() throws SQLException {
        System.out.print("Enter username: ");
        String username = scanner.nextLine();
        System.out.print("Enter password: ");
        String password = scanner.nextLine();

        String query = "SELECT * FROM users WHERE username = ? AND password = ?";
        PreparedStatement ps = conn.prepareStatement(query);
        ps.setString(1, username);
        ps.setString(2, password);
        ResultSet rs = ps.executeQuery();

        if (rs.next()) {
            String role = rs.getString("role");
            System.out.println("Login successful! Welcome " + role + " " + username);
            if (role.equals("admin")) {
                adminMenu();
            } else {
                studentMenu(username);
            }
        } else {
            System.out.println("Invalid username or password.");
        }
    }

    // Admin Menu
    private static void adminMenu() throws SQLException {
        while (true) {
            System.out.println("\nAdmin Menu:");
            System.out.println("1. Add Exam");
            System.out.println("2. Add Question");
            System.out.println("3. Logout");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); 

            switch (choice) {
                case 1: addExam(); break;
                case 2: addQuestion(); break;
                case 3: return;
                default: System.out.println("Invalid choice. Try again.");
            }
        }
    }

    // Add Exam (Admin)
    private static void addExam() throws SQLException {
        System.out.print("Enter exam name: ");
        String examName = scanner.nextLine();
        System.out.print("Enter total questions: ");
        int totalQuestions = scanner.nextInt();
        System.out.print("Enter exam duration (minutes): ");
        int duration = scanner.nextInt();

        String query = "INSERT INTO exams (exam_name, total_questions, duration) VALUES (?, ?, ?)";
        PreparedStatement ps = conn.prepareStatement(query);
        ps.setString(1, examName);
        ps.setInt(2, totalQuestions);
        ps.setInt(3, duration);
        ps.executeUpdate();

        System.out.println("Exam added successfully!");
    }

    // Add Question (Admin)
    private static void addQuestion() throws SQLException {
        System.out.print("Enter exam ID: ");
        int examId = scanner.nextInt();
        scanner.nextLine(); 
        System.out.print("Enter question: ");
        String question = scanner.nextLine();
        System.out.print("Enter option A: ");
        String optionA = scanner.nextLine();
        System.out.print("Enter option B: ");
        String optionB = scanner.nextLine();
        System.out.print("Enter option C: ");
        String optionC = scanner.nextLine();
        System.out.print("Enter option D: ");
        String optionD = scanner.nextLine();
        System.out.print("Enter correct option (A/B/C/D): ");
        String correctOption = scanner.nextLine().toUpperCase();

        String query = "INSERT INTO questions (exam_id, question, optionA, optionB, optionC, optionD, correct_option) VALUES (?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement ps = conn.prepareStatement(query);
        ps.setInt(1, examId);
        ps.setString(2, question);
        ps.setString(3, optionA);
        ps.setString(4, optionB);
        ps.setString(5, optionC);
        ps.setString(6, optionD);
        ps.setString(7, correctOption);
        ps.executeUpdate();

        System.out.println("Question added successfully!");
    }

    // Student Menu
    private static void studentMenu(String username) throws SQLException {
        while (true) {
            System.out.println("\nStudent Menu:");
            System.out.println("1. Take Exam");
            System.out.println("2. Logout");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1: takeExam(username); break;
                case 2: return;
                default: System.out.println("Invalid choice. Try again.");
            }
        }
    }

    // Student Takes Exam
    private static void takeExam(String username) throws SQLException {
        System.out.print("Enter exam ID: ");
        int examId = scanner.nextInt();
        scanner.nextLine();

        String query = "SELECT * FROM questions WHERE exam_id = ?";
        PreparedStatement ps = conn.prepareStatement(query);
        ps.setInt(1, examId);
        ResultSet rs = ps.executeQuery();

        int score = 0;
        while (rs.next()) {
            System.out.println("\n" + rs.getString("question"));
            System.out.println("A. " + rs.getString("optionA"));
            System.out.println("B. " + rs.getString("optionB"));
            System.out.println("C. " + rs.getString("optionC"));
            System.out.println("D. " + rs.getString("optionD"));
            System.out.print("Your answer: ");
            String answer = scanner.nextLine().toUpperCase();

            if (answer.equals(rs.getString("correct_option"))) {
                score++;
            }
        }

        System.out.println("\nExam completed! Your score: " + score);
        saveResult(username, examId, score);
    }

    private static void saveResult(String username, int examId, int score) throws SQLException {
        String query = "INSERT INTO student_exams (student_id, exam_id, completed) VALUES ((SELECT id FROM users WHERE username = ?), ?, TRUE)";
        PreparedStatement ps = conn.prepareStatement(query);
        ps.setString(1, username);
        ps.setInt(2, examId);
        ps.executeUpdate();
    }
